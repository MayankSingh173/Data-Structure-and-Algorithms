Problem -> https://leetcode.com/problems/find-right-interval/

Solution : 

class Solution {
    public int[] findRightInterval(int[][] intervals) {
        
        int n = intervals.length;
        int ans[] = new int[n];
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i<n ; i++){
            map.put(intervals[i][0], i);
        }
        
        int copy[][] = new int[n][2];
        
        for(int i = 0 ; i<n ; i++){
            copy[i][0] = intervals[i][0];
            copy[i][1] = intervals[i][1];
        }
        
        sort(intervals);
        
        for(int i = 0; i<n ; i++){
            int min = Integer.MAX_VALUE;
            int low = 0, high = n-1;
            int end = copy[i][1];
            
            while(low <= high){
                int mid = (low+high)/2;
                
                if(intervals[mid][0] >= end){
                    min = Math.min(min, map.get(intervals[mid][0]));
                    high = mid-1;
                }
                else{
                    low = mid+1;
                }
            }
            
            ans[i] = (min != Integer.MAX_VALUE) ? min : -1;
        }
        
        return ans;
    }
    
    public static void sort(int arr[][]) 
    { 
        // Using built-in sort function Arrays.sort 
        Arrays.sort(arr, new Comparator<int[]>() { 
            
          @Override              
          // Compare values according to columns 
          public int compare(final int[] entry1,  
                             final int[] entry2) { 
  
            // To sort in descending order revert  
            // the '>' Operator 
            if (entry1[0] > entry2[0]) 
                return 1; 
            else
                return -1; 
          } 
        });  // End of function call sort(). 
    } 
}